<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EclipseLibrary.Mvc</name>
    </assembly>
    <members>
        <member name="T:EclipseLibrary.Mvc.Controllers.MvcErrorEvent">
            <summary>
            Use this to log errors to the health monitoring system
            </summary>
        </member>
        <member name="T:EclipseLibrary.Mvc.Controllers.EclipseController">
            <summary>
            Provides the framewark for persisting status messages and model errors across redirects.
            </summary>
            <remarks>
            <para>
            You andd errors to ModelState as you always did. Additionally, you can use the <see cref="M:EclipseLibrary.Mvc.Controllers.EclipseController.AddStatusMessage(System.String)"/> to add status messages
            meant for the user. Make sure each view calls the <see cref="M:EclipseLibrary.Mvc.Html.StatusSummaryExtensions.StatusSummary(System.Web.Mvc.HtmlHelper)"/> helper which is status message aware.
            </para>
            <para>
            The controller is decorated with the SessionState Required attribute to ensure that TempData is accessible.
            </para>
            <para>
            Sharad 23 Jun 2011: Added RenderPartialViewToString. Removed it on 5 Aug 2011.
            </para>
            <para>
            Sharad 7 Jul 2011: Explicitly setting the culture to US culture
            </para>
            <para>
            Sharad 12 Jul 2011: Added method TryValidateList()
            </para>
            <para>
            Sharad 14 Jul 2011: Added utility class AutoCompleteItem
            </para>
            <para>
            Sharad 1 Ocr 2011: Added ValidationErrorResult
            </para>
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Controllers.EclipseController.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            Only if we are redirecting, transfer model errors to temp data
            </summary>
            <param name="filterContext"></param>
            <remarks>
            We do this just before the result executes. This gives ample time to derived controllers to manipulate the model state.
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Controllers.EclipseController.AddStatusMessage(System.String)">
            <summary>
            Add a status message which can then be displayed appropriately by <see cref="M:EclipseLibrary.Mvc.Html.StatusSummaryExtensions.StatusSummary(System.Web.Mvc.HtmlHelper)"/>
            </summary>
            <param name="msg"></param>
            <remarks>
            public so that attributes like <see cref="T:EclipseLibrary.Mvc.Controllers.AuthorizeExAttribute"/> can access it.
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Controllers.EclipseController.GetStatusMessages">
            <summary>
            Returns the added status messages
            </summary>
            <returns></returns>
            <remarks>
            Added by Sharad on 23 May 2012. Allows apps, e.g. Carton Manager, to access the status messages and return them as an ajax list
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Controllers.EclipseController.ValidationErrorResult">
            <summary>
            This returns validationsummary text as content with response status of 203.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            The text returned is the same as what Html.ValidationSummary() would have returned in the view. Thuis function
            is designed for Ajax sceneraios where you can return validation errors as string and have your script replace the existing validation summary.
            </para>
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Controllers.EclipseController.ExecuteCore">
            <summary>
            For now, only US culture is supported
            </summary>
        </member>
        <member name="M:EclipseLibrary.Mvc.Controllers.EclipseController.OnException(System.Web.Mvc.ExceptionContext)">
            <summary>
            Sharad 20 Oct 2012: For AJAX requests, the yellow screen is unreadable. This attribute returns exception content instead of the HTML content of the yellow screen.
            Also raises error event
            </summary>
            <remarks>
            <code>
            <![CDATA[
            $.ajax({
            
              error: function(
            
            });
            
            
            
            ]]>
            </code>
            </remarks>
        </member>
        <member name="T:EclipseLibrary.Mvc.Controllers.AuthorizeExAttribute">
            <summary>
            This class adds the ability to specify a reason for the login request.
            You specify the reason in the constructor. The format string can use the place holder {0}
            which will be replaced by the value of <see cref="P:System.Web.Mvc.AuthorizeAttribute.Roles"/>.
            </summary>
            <remarks>
            <para>
            The functionality is available only if all controllers involved are derived from <see cref="T:EclipseLibrary.Mvc.Controllers.EclipseController"/>.
            </para>
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Controllers.AuthorizeExAttribute.AuthorizeCore(System.Web.HttpContextBase)">
            <summary>
            Sharad 30 Sep 2011: If authorization skipping has been requested, claim that the request is authorized
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
            <remarks>
            <para>
            Sharad 12 Dec 2011: EclipseLibrary.Oracle.OracleRoleProvider returns WEB_PROXYUSER as the only role for the proxy user.
            We consider proxy users to be super users and they are always authorized.
            </para>
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Controllers.AuthorizeExAttribute.IsSuperUser(System.Web.HttpContextBase)">
            <summary>
            Returns true if authorization has been skipped, or if the user has the super user role WEB_PROXYUSER
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
            <remarks>
            Use this static function if you are writing authorization code and wish to emulate the behavior provided by this attribute.
            This attribute contains logic to allow full access to anyone who is logged in as the proxy user.
            </remarks>
        </member>
        <member name="P:EclipseLibrary.Mvc.Controllers.AuthorizeExAttribute.Purpose">
            <summary>
            What will this role allow the user to accomplish. Defaults to the reason
            </summary>
        </member>
        <member name="T:EclipseLibrary.Mvc.Hosting.VirtualPathProviderEx">
             <summary>
             This provider enables you to access files which are outside of the application root dir.
             ASP.NET complains if you try to set the url to ~/../Somedir/Somefile. Using this virtual provider, you will
             be able to access these files.
             
             DCMSMobile uses this capability to access jquery script files from DcmsMobile Scripts director.
             </summary>
             <remarks>
             <para>
             VirtualPathProviderEx should only be used in development environment. It enables access to Script and Content folders which would exist under the DcmsMobile project
             without having to copy this folder into your own project. It works well with T4MVC.
             
             In the constructor of this provider you specify a list of directories which should be redirected to another directory.
             </para>
             You register this provider in global.asax. The constructor is passed the relative of the alternate application root.
             This should probably be the first entry in the Application_Start() function.
             <code>
            protected void Application_Start()
            {
              HostingEnvironment.RegisterVirtualPathProvider(new VirtualPathProviderEx("../DcmsMobile", new[] {
                Links_Inquiry.Content.Url(),
                Links_Inquiry.Scripts.Url()
              }));
                ...
            }
             </code>
             
             Tell ASP.NET that you would like static files to pass through this VirtualPathProvider by modifying the web.config in the application root.
             <code>
             <![CDATA[
            <system.webServer>
              <!-- Requirement of VirtualPathProviderEx. Needed so that we can access content and script files from DcmsMobile directory-->
              <handlers>
                <add name="AspNetStaticFileHandler-GIF" path="*.gif" verb="GET,HEAD" type="System.Web.StaticFileHandler"/>
                <add name="AspNetStaticFileHandler-JPG" path="*.jpg" verb="GET,HEAD" type="System.Web.StaticFileHandler"/>
                <add name="AspNetStaticFileHandler-CSS" path="*.css" verb="GET,HEAD" type="System.Web.StaticFileHandler"/>
                <add name="AspNetStaticFileHandler-JS" path="*.js" verb="GET,HEAD" type="System.Web.StaticFileHandler"/>
              </handlers>    
            </system.webServer>
             ]]>
             </code>
             <para>
             For redirecting static files see http://www.paraesthesia.com/archive/2011/07/21/running-static-files-through-virtualpathprovider-in-iis7.aspx.
             The static files returned by this VirtualPathProvider are not cached by the browser. This is great for development but horrible for production.
             So this provider should only be used under development environment.
             </para>
             <para>
             T4MVC Notes:
             
             Even though your Script and Content folders will no longer have any files in them, you must still add the file names you intend to use within your project.
             This is so that T4MVC can generate constants for the file names which you will use in your views. Visual Studio will show a warning icon indicating that the files
             do not exist, but this is not a problem.
             Typically you will add the following nonexistent files to your project:
             Content\jquery.mobile-1.4.2.css
             Script\jquery-2.1.1.js
             Script\jquery.mobile-1.4.2.js
             
               Because .min.js and .min.css files no longer exist in the Content and Script directories of the application, T4MVC will never request minified files.
               This is not good because we want to use minified files in production environment.
               Therefore you should modify the T4MVC.tt.hooks.t4 file so that it requests minified files in production
               
            <code>
            <![CDATA[
            private static string ProcessVirtualPathDefault(string virtualPath) {
                // The path that comes in starts with ~/ and must first be made absolute
                string path = VirtualPathUtility.ToAbsolute(virtualPath);
                // Add your own modifications here before returning the path. ****The code after this should be added by you****
                if (IsProduction())
                {
                    if (virtualPath.EndsWith(".js") && !virtualPath.EndsWith(".min.js"))
                    {
                        path = path.Replace(".js", ".min.js");
                    }
                    else if (virtualPath.EndsWith(".css") && !virtualPath.EndsWith(".min.css"))
                    {
                        path = path.Replace(".css", ".min.css");
                    }
                }
                return path;
            }
            ]]>
             </code>
             </para>
             </remarks>
        </member>
        <member name="F:EclipseLibrary.Mvc.Hosting.VirtualPathProviderEx._altAppRootRelative">
            <summary>
            e.g. "../DcmsMobile"
            </summary>
        </member>
        <member name="M:EclipseLibrary.Mvc.Hosting.VirtualPathProviderEx.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="altAppRootRelative">The alternate root directory under which we will look for files. This directory should be relative to the root directory
            of the application. e.g. ../DcmsMobile</param>
            <param name="dirs">The list of directories under app root which need to be mapped to the alternate directory</param>
            <remarks>
            In gloabal.asax.cs
            <code>
            </code>
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Hosting.VirtualPathProviderEx.FileExists(System.String)">
            <summary>
            If this virtual path points to a redirectable directory, then check for file existence at te alternate location.
            We throw an exception if the file is not found to ease debugging.
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:EclipseLibrary.Mvc.Hosting.VirtualPathProviderEx.GetFile(System.String)">
            <summary>
            If this virtual path points to a redirectable directory, then special handle it by returning a special VirtualFile
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:EclipseLibrary.Mvc.Hosting.VirtualPathProviderEx.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
            <summary>
            This override ensures that changes to _layoutMain.cshtml are visible even without recompiling the project.
            </summary>
            <param name="virtualPath"></param>
            <param name="virtualPathDependencies"></param>
            <param name="utcStart"></param>
            <returns></returns>
        </member>
        <member name="M:EclipseLibrary.Mvc.Hosting.VirtualPathProviderEx.IsAlternatePath(System.String)">
            <summary>
            If the virtual path begins with any of the directories passed in the constructor, then it is an alternate path
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:EclipseLibrary.Mvc.Hosting.VirtualPathProviderEx.GetAltPhysicalPath(System.String)">
            <summary>
            Returns the absolute physical path under alternate application root
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="P:EclipseLibrary.Mvc.Html.AutocompleteItem.label">
            <summary>
            Text displayed in the list
            </summary>
        </member>
        <member name="P:EclipseLibrary.Mvc.Html.AutocompleteItem.value">
            <summary>
            The id which is posted back (e.g. SKU Id)
            </summary>
        </member>
        <member name="P:EclipseLibrary.Mvc.Html.AutocompleteItem.shortName">
            <summary>
            Friendly short name of the selected value (such as UPC code). Defaults to value
            </summary>
        </member>
        <member name="T:EclipseLibrary.Mvc.Html.AutocompleteExtensions">
            <summary>
            Need a javascript function to reliably clear autocomplete input, including validation errors
            </summary>
            <remarks>
            <para>
            Several <see cref="M:EclipseLibrary.Mvc.Html.AutocompleteExtensions.AutocompleteFor``3(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.String,System.String,System.Object)"/> helpers are available, each designed for different scenarios. The Overload 1 takes lambdas for the value field and for
            the short name field. This is used when you want to postback the value (invisibly) selected by the user, and the short name (visibly) selected by the user. This overload
            also allows you to supply initial values for the invisible id and the visible short name simply by setting the values of the properties referenced by the lambda expressions.
            Ideally suited for SKU autocomplete where the hidden SKU Id needs to be posted back.
            </para>
            <para>
            Overload 2 takes only a single lambda expression for the value. This is for scenarios where your value is visible to the user, such as the Style autocomplete.
            </para>
            <para>
            Client API: $('#myautomplete').autocompleteEx('clear');
            To clear all autocomplete fields:  <c>$('input.ui-autocomplete-input').autocompleteEx('clear');</c>
            </para>
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.AutocompleteExtensions.AutocompleteFor``3(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.String,System.String,System.Object)">
             <summary>
             Overload 1: Hidden field for value and visible textbox for short name
             </summary>
             <typeparam name="TModel">Type of the model</typeparam>
             <typeparam name="TProperty1">Type of the property for which autocomplete is being created.</typeparam>
             <typeparam name="TProperty2"></typeparam>
             <param name="helper">HTML helper</param>
             <param name="exprValue">Lambda expression referencing the property which will receive the Id. Client side validation is not performed on this property.</param>
             <param name="listUrl">Url to invoke which will return the list of choices. It will be passed a single parameter called term.</param>
             <param name="validateUrl">The Url to invoke to validate the user entry when the user does not select from a list. Optional but highly recommended.
             If not specified, then program will misbehave if user does not select from list.</param>
             <param name="htmlAttributes">HTML attributes to apply to the rendered text box</param>
             <param name="exprShortName"></param>
             <returns>Markup to render</returns>
             <remarks>
             <para>
             The list is designed to be non obtrusive. It appears only after a significant pause (2 sec). The user is free to type a value without choosing from a list.
             In this scenario, the action specified in <paramref name="validateUrl"/> will be invoked during the validation process 
             to obtain the value which the user would have selected from the list.
             </para>
             <para>
             Once the user makes a selection, the <see cref="P:EclipseLibrary.Mvc.Html.AutocompleteItem.shortName"/> is selected in the text box and the
             <see cref="P:EclipseLibrary.Mvc.Html.AutocompleteItem.value"/> is selected in the hidden field.
             The companion <see cref="M:EclipseLibrary.Mvc.Html.AutocompleteExtensions.AutocompleteDescriptionFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String)"/> helper should be used if it is desirable to show the description of what the user selected.
             The span generated by this helper will receive <see cref="P:EclipseLibrary.Mvc.Html.AutocompleteItem.label"/>
             </para>
             <para>
             Sample markup. Notice that if you have applied validators, the validation attributes are rendered as well. The hidden field is rendered immediately after
             the visible text box. This is how the script identifies the hidden field.
             </para>
             <code>
             <![CDATA[
             <input name="exprValue" type="hidden" />
             <input type="text" name="exprShortName"
               data-ac-list-url="/REQ2/AutoComplete/SkuAutocomplete"
               data-ac-validate-url="/REQ2/AutoComplete/ValidateSku" />
             &darr;*
             ]]>
             </code>
             <para>
             You can customize autocomplete options by writing your own script. Pass an id to the <see cref="M:EclipseLibrary.Mvc.Html.AutocompleteExtensions.AutocompleteFor``3(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.String,System.String,System.Object)"/> helper like this:
             </para>
             <code>
             <![CDATA[
            @Html.AutocompleteFor(m => m.Style, Url.Action(MVC_Receiving.Receiving.AutoComplete.StyleAutocomplete()), null, new
            {
                size = 15,
                style = "text-transform: uppercase;",
                id = "tbStyleAutocomplete"
            })
             ]]>
             </code>
             <para>
             Then somewhere in your <c>$(document).ready()</c> function, set the options.
             </para>
             <code>
             <![CDATA[
            $(document).ready(function () {
                $('#tbStyleAutocomplete').autocompleteEx('option', 'minLength', 1);
            });
             ]]>
             
             </code>
             
             
             </remarks>
             <example>
             <para>
             Include the script Autocomplete.partial.js. Include the style sheet Autocomplete.partial.css. Include the image Images/ajax-loader.gif.
             All these files are available in this library and you will need to copy them into your project.
             </para>
             <para>
             In the view:
             </para>
             <code>
             <![CDATA[
            @Html.AutocompleteFor(m => m.NewSourceSkuId, Url.Action(MVC_REQ2.REQ2.AutoComplete.SkuAutocomplete()),
                    Url.Action(MVC_REQ2.REQ2.AutoComplete.ValidateSku()), new
                 {
                     style = "text-transform: uppercase",
                     size = 18,
                     maxlength = 20
            })                  
            @Html.AutocompleteMessageFor(m => m.NewSourceSkuId)
             ]]>
             </code>
             <para>
             The action method must have a parameter called <c>term</c> which will be set to the text entered by the user.
             It must return a list of <see cref="T:EclipseLibrary.Mvc.Html.AutocompleteItem"/> as JSON.
             </para>
             <code>
             <![CDATA[
            public ActionResult SkuAutocomplete(string term)
            {
                var data = _repos.UpcAutoComplete(term.ToUpper());
                return Json(Mapper.Map<IEnumerable<AutoCompleteItem>>(data), JsonRequestBehavior.AllowGet);
            }
             ]]>
             </code>
             <para>
             The SKU model is mapped to <see cref="T:EclipseLibrary.Mvc.Html.AutocompleteItem"/> like this:
             </para>
             <code>
             <![CDATA[
            Mapper.CreateMap<SkuModel, AutocompleteExtensions.AutoCompleteItem>()
                .ForMember(dest => dest.label, opt => opt.MapFrom(src => string.Format("{0},{1},{2},{3}", src.Style, src.Color, src.Dimension, src.SkuSize)))
                .ForMember(dest => dest.value, opt => opt.MapFrom(src => src.SkuId))
                .ForMember(dest => dest.shortName, opt => opt.MapFrom(src => src.UpcCode))
                ;
             ]]>
             </code>
             <para>
             Another action method is needed which is responsible for validating user input when the user does not select from a list. It needs to return a single
             <see cref="T:EclipseLibrary.Mvc.Html.AutocompleteItem"/> or error message based on the text entered by the user.
             </para>
             <code>
             <![CDATA[
            [HandleAjaxError(true)]
            [HttpGet]
            public virtual JsonResult ValidateSku()
            {
                if (Request.QueryString.Count == 0)
                {
                    throw new ApplicationException("Nothing to validate. Should not happen");
                }
                var barCode = Request.QueryString[0].ToUpper();
                var sku = _repos.GetSkuFromUpc(barCode);
                if (sku == null)
                {
                    return Json(string.Format("No such SKU: {0}", barCode.ToUpper()), JsonRequestBehavior.AllowGet);
                }
                return Json(Mapper.Map<AutoCompleteItem>(sku), JsonRequestBehavior.AllowGet);
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.AutocompleteExtensions.AutocompleteFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.Object)">
            <summary>
            Overload 2: Visible textbox for value. No short name
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="helper"></param>
            <param name="exprValue"></param>
            <param name="listUrl"></param>
            <param name="validateUrl"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.AutocompleteExtensions.AutocompleteDescriptionFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String)">
            <summary>
            Displays label of the selected value in the associated autocomplete
            </summary>
            <typeparam name="TModel">Type of the model. Automatically deduced</typeparam>
            <typeparam name="TProperty">Type of value displayed in the visible text box. Usually string.</typeparam>
            <param name="helper">HTML helper</param>
            <param name="expression">Lambda expression referncing the visible text box</param>
            <param name="htmlAttributes">HTML attributes to apply to the span element</param>
            <param name="html">Initial html to display within the span element</param>
            <returns>Markup for the span element to render</returns>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.AutocompleteExtensions.Autocomplete(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Advanced: For use in edit templates where field names are read from template info
            </summary>
            <param name="helper"></param>
            <param name="nameValue"></param>
            <param name="nameShortName"></param>
            <param name="listUrl"></param>
            <param name="validateUrl"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.GroupDropListExtensions.GroupDropListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{EclipseLibrary.Mvc.Html.GroupSelectListItem})">
             <summary>
             Render a grouped drop down list for the specified property of the model and the spefied grouped data
             </summary>
             <typeparam name="TModel"></typeparam>
             <typeparam name="TProperty"></typeparam>
             <param name="helper">Not used. Helps in deducing model type.</param>
             <param name="expression"></param>
             <param name="data"></param>
             <returns>HTML to render</returns>
             <remarks>
             <para>
             Items with empty GroupText are supported. They are appended directly to the <c>select</c> element and appear in the beginning, outside of all groups.
             </para>
             <para>
             The item with <c>Selected</c> set to true is initially selected. If selected item is not specified, the first item is selected.
             </para>
             <para>
             The sorting of the passed <paramref name="data"/> is preserved. The first group in the sort order is the first group encountered in the passed data,
             and so on. This is as per the behavior of the LINQ GroupBy() method.
             </para>
             <para>
             In order to use this helper, the <c>web.config</c> in Views folder must reference the <c>EclipseLibrary.Mvc.Html</c> namespace.
             </para>
             <code>
             <![CDATA[
            <system.web.webPages.razor>
            <pages pageBaseType="System.Web.Mvc.WebViewPage">
                <namespaces>
                <add namespace="System.Web.Mvc" />
                <add namespace="System.Web.Mvc.Html" />
                <add namespace="System.Web.Routing" />
                <add namespace="EclipseLibrary.Mvc.Html" />
                </namespaces>
            </pages>
            </system.web.webPages.razor>
             ]]>
             </code>
             </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.GroupDropListExtensions.GroupDropListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{EclipseLibrary.Mvc.Html.GroupSelectListItem},System.String,System.Object)">
            <summary>
            Sharad 12 Jul 2012: GroupDropListFor() Can specify html attributes along with option label. 
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="helper"></param>
            <param name="expression"></param>
            <param name="data"></param>
            <param name="optionLabel"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.GroupDropListExtensions.GroupDropListForImpl``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{EclipseLibrary.Mvc.Html.GroupSelectListItem})">
            <summary>
            
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="helper"></param>
            <param name="expression"></param>
            <param name="data"></param>
            <returns></returns>
            <remarks>
            Sharad 24 April 2012: Generating Validation attributes for client side validation
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Helpers.ReflectionHelpers.NameFor``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            If you have an instance of the model available, then it is more convenient to use the extension function NameFor
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="propertyExpression"></param>
            <returns></returns>
        </member>
        <member name="T:EclipseLibrary.Mvc.Html.StatusSummaryExtensions">
            <summary>
            Enables you to add error and status messages to Controller.TempData so that they can survive a redirect.
            </summary>
            <remarks>
            <para>
            Errors should be added to model state as always. <see cref="T:EclipseLibrary.Mvc.Controllers.EclipseController"/> has code to copy errors to TempData.
            Status messages should be added using <see cref="M:EclipseLibrary.Mvc.Controllers.EclipseController.AddStatusMessage(System.String)"/>
            </para>
            <code>
            <![CDATA[
            TempData.AddErrorMessage("Your session has expired. Please start over.");
            ]]>
            </code>
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.StatusSummaryExtensions.StatusSummary(System.Web.Mvc.HtmlHelper)">
            <summary>
            Returns a status summary list.
            </summary>
            <param name="helper"></param>
            <returns></returns>
            <remarks>
            <para>
            Status messages are added using <see cref="M:EclipseLibrary.Mvc.Controllers.EclipseController.AddStatusMessage(System.String)"/>
            </para>
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.StatusSummaryExtensions.StatusMessages(System.Web.Mvc.HtmlHelper)">
            <summary>
            We do not want to generate markup in compiled code. So this function returns the list of messages which you can format any way you want.
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.StatusSummaryExtensions.StatusSummaryImpl(System.Web.Mvc.TempDataDictionary,System.Text.StringBuilder)">
            <summary>
            Sharad 2 Dec 2011: Now displaying error messages in tempdata as well
            </summary>
            <param name="tempData"></param>
            <param name="sb"></param>
        </member>
        <member name="T:EclipseLibrary.Mvc.Html.WebGridCellEx`1">
            <summary>
            This class is passed to you as a parameter to the lambda specified in <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.CellHtml(System.Func{EclipseLibrary.Mvc.Html.WebGridCellEx{`0},System.Object})"/>.
            </summary>
            <typeparam name="TModel">The type of the model on which the row is based</typeparam>
            <remarks>
            <para>
            The <see cref="P:System.Web.Mvc.ViewPage`1.Html"/> property can be used to generate custom HTML using any of the standard helpers.
            The <see cref="P:EclipseLibrary.Mvc.Html.WebGridCellEx`1.Value"/> property is a convenience which lets you know the value that will be displayed in the column.
            </para>
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridCellEx`1.SetModel(`0,System.Int32)">
            <summary>
            Creates the HTML helper for the row.
            </summary>
            <param name="row"></param>
            <param name="rowIndex"></param>
        </member>
        <member name="P:EclipseLibrary.Mvc.Html.WebGridCellEx`1.RowIndex">
            <summary>
            Index of the current row
            </summary>
            <example>
            <para>
            Add a column which displays the row number.
            </para>
            <code>
            <![CDATA[
            grid.AddColumn().HeaderHtml("#").CellHtml(c => c.RowIndex + 1);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:EclipseLibrary.Mvc.Html.WebGridCellEx`1.Value">
            <summary>
            If the column does not represent a specific property, returns null. Otherwise, returns the raw value of the property which is being displayed in the column
            </summary>
        </member>
        <member name="T:EclipseLibrary.Mvc.Html.WebGridColumnEx`1">
            <summary>
            This class encapsulates all properties of a single grid column
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            It provides enough properties to allow full control on each <c>th</c> and <c>td</c> tag generated.
            <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.HeaderHtml(System.String)"/> customizes what is rendered inide the <c>th</c> tag whereas <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.HeaderAttributes(System.Func{EclipseLibrary.Mvc.Html.WebGridColumnEx{`0},System.Collections.Generic.IDictionary{System.String,System.Object}})"/> provide full control
            on the attributes of <c>th</c>. The <c>class</c> attribute can be more conveniently specified using <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.HeaderStyle(System.String)"/>.
            For the <c>td</c> tags used within the table body, corresponding methods are <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.CellAttributes(System.Func{EclipseLibrary.Mvc.Html.WebGridCellEx{`0},System.Collections.Generic.IDictionary{System.String,System.Object}})"/>, <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.CellStyle(System.String)"/>
            and <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.CellHtml(System.Func{EclipseLibrary.Mvc.Html.WebGridCellEx{`0},System.Boolean},System.Func{EclipseLibrary.Mvc.Html.WebGridCellEx{`0},System.Object})"/>.
            Similarly, for the footer you can use <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.FooterStyle(System.String)"/> and <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.FooterHtml(System.String)"/>.
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.HeaderAttribute(System.String,System.Object)">
            <summary>
            Adds a single attribute unconditionally. Can be called multiple times to add multiple attributes.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            If the attribute has already been added, it will be overwritten.
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.HeaderAttributes(System.Func{EclipseLibrary.Mvc.Html.WebGridColumnEx{`0},System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            Attributes to be rendered with the <c>th</c> tag.
            </summary>
            <param name="headerAttributesAccessor"></param>
            <returns></returns>
            <example>
            <para>
            The attributes are supplied as a dictionary of name value pairs. The lambda is passed an instance of this class so that you can access the meta data.
            </para>
            <code>
            <![CDATA[
                grid.AddColumn(m => m.Building).Presorted().HeaderAttributes(col => new Dictionary<string, object>
                 {
                   {"data-name", col.MetaData.PropertyName},
                   {"data-display-name", col.MetaData.ShortDisplayName}                                          
                 });
            ]]>
            </code>
            </example>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.HeaderHtml(System.String)">
            <summary>
            The text you supply is not automatically encoded. Thus is is OK to embed HTML within the text.
            </summary>
            <param name="header"></param>
            <returns></returns>
            <remarks>
            <para>
            If <c>columnExpr</c> was passed to <see cref="M:EclipseLibrary.Mvc.Html.WebGridEx`1.AddColumn"/>, then the header text is automatically set to the Display Name of the property
            referenced by the expression. You can still choose to override it by specifying custom text.
            </para>
            </remarks>
            <example>
            <code>
            <![CDATA[
             grid.AddColumn().HeaderHtml("#").CellHtml(c => c.RowIndex + 1);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.HeaderStyle(System.String)">
            <summary>
            Specifies style for the header column.
            </summary>
            <param name="style"></param>
            <returns></returns>
            <remarks>
            <para>
            Note that there is no default value for this property. <c>CellStyle</c> is never used as header style.
            </para>
            </remarks>
            <example>
            <code>
            <![CDATA[
            grid.AddColumn(m => m.Sku.Style).HeaderHtml("SKU").HeaderStyle("centered");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.SpanHeader">
             <summary>
             Spans the header of the previous column to cover the header of this column
             </summary>
             <returns></returns>
             <remarks>
             <para>
             In the example below, the heading <c>Sewing Plant</c> will span two columns
             </para>
             <code>
             <![CDATA[
            columns: new[] {
                grid.AddColumn(m => m.SewingPlantId).Header("Sewing Plant").CellHtml(cellFormat),
                grid.AddColumn(m => m.PlantName).Span();
                grid.AddColumn(m => m.Style).CellHtml(cellFormat);
             ]]>
             </code>
             </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.Presorted(System.Boolean)">
            <summary>
            Arrow icon is displayed against presorted columns. The arrow changes direction depending on the sort direction.
            </summary>
            <param name="descending"></param>
            <returns></returns>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.CellAttributes(System.Func{EclipseLibrary.Mvc.Html.WebGridCellEx{`0},System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            
            </summary>
            <param name="attributesAccessor">Passed cell infomation enables you to apply attributes conditionally</param>
            <returns></returns>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.CellAttribute(System.String,System.Object)">
            <summary>
            Adds a single attribute unconditionally. Can be called multiple times to add multiple attributes.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            If the attribute has already been added, it will be overwritten.
            </remarks>
        </member>
        <member name="F:EclipseLibrary.Mvc.Html.WebGridColumnEx`1._conditionalCellHtml">
            <summary>
            A null predicate implies that it is always true
            </summary>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.CellHtml(System.Func{EclipseLibrary.Mvc.Html.WebGridCellEx{`0},System.Object})">
             <summary>
             Provides the HTML to be displayed in the cell
             </summary>
             <param name="cellHtml"></param>
             <returns></returns>
             <example>
             <para>
             This example uses the helper syntax to provide the HTML. You can access cell info using the <c>item</c> variable.
             This variable is of type <see cref="T:EclipseLibrary.Mvc.Html.WebGridCellEx`1"/>
             </para>
             <code>
             <![CDATA[
             grid.AddColumn().HeaderHtml("Pieces")
                 .CellHtml(@<text>@item.Html.DisplayFor(m => m.Pieces) of @item.Html.DisplayFor(m => m.ExpectedPieces)</text>);
                 
                grid.AddColumn(m => m.AllEpc)
                    .CellAttribute("style", "min-width: 14em")
                    .CellHtml(c => c.Html.ViewData.Model.AllEpc.Count() >= 2,
            @<div class="widget-container">
                <div class="accordion">
                    <h3>
                        <a href="#">@string.Format("{0:N0} EPC", item.Html.ViewData.Model.AllEpc.Count())</a></h3>
                    <div>
                        @OrderedList(item.Html.ViewData.Model.AllEpc)
                    </div>
                </div>
            </div>
                    ).CellHtml(c => OrderedList(c.Html.ViewData.Model.AllEpc, "noaccordion"));
             ]]>
             </code>
             <para>
             Alternatively, you can provide the HTML using the lambda syntax. This is useful when you are displaying simple values.
             </para>
             <code>
             <![CDATA[
              grid.AddColumn(m => m.Header.ResvId).CellHtml(item => item.Html.ActionLink(item.Model.Header.ResvId, MVC_REQ2.REQ2.Home.ManageSku(item.Model.Header.ResvId)))
                  .CellAttribute("title", "Click to add SKUs");
             ]]>
             </code>
             </example>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.CellHtml(System.Func{EclipseLibrary.Mvc.Html.WebGridCellEx{`0},System.Boolean},System.Func{EclipseLibrary.Mvc.Html.WebGridCellEx{`0},System.Object})">
            <summary>
            You can supply HTML based on some condition
            </summary>
            <param name="predicate"></param>
            <param name="cellHtml"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="F:EclipseLibrary.Mvc.Html.WebGridColumnEx`1._conditionalStyles">
            <summary>
            A null predicate implies that it is always true
            </summary>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.GetCellStyle(EclipseLibrary.Mvc.Html.WebGridCellEx{`0})">
            <summary>
            If <paramref name="cellItem"/> is null, cell specific styles are not included.
            </summary>
            <param name="cellItem"></param>
            <returns></returns>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.CellStyle(System.Func{EclipseLibrary.Mvc.Html.WebGridCellEx{`0},System.Boolean},System.String)">
            <summary>
            Conditionally apply style to a cell
            </summary>
            <returns></returns>
            <remarks>
            <para>
            The class <c>ui-state-error</c> is applied to the cell only if pallet count is 0. The class <c>right-align</c> is appled
            to all cells in the column.
            </para>
            <code>
            <![CDATA[
            grid.AddColumn(m => m.PalletCount).CellStyle(m => m.Model.PalletCount == 0, "ui-state-error");
            ]]>
            </code>
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.CellStyle(System.String)">
            <summary>
            Apply the style to all columns
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.FooterHtml(System.String)">
            <summary>
            Supplies the HTML for the footer of the column
            </summary>
            <param name="footerHtml"></param>
            <returns></returns>
            <remarks>
            <para>
            In the example, the model of the view has a property called <c>EarliestDate</c> which we would like to display as footer text of the
            column for <c>StartDate</c>.
            </para>
            <code>
            <![CDATA[
            grid.Column(m => m.StartDate).Footer(Html.DisplayFor(m => m.EarliestDate))
            ]]>
            </code>
            </remarks>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.FooterStyle(System.String)">
            <summary>
            Specifies style for the header column.
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="P:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.MetaData">
            <summary>
            Provides access to the meta data associated with the property referenced in the lambda expression passed to
            <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.SetColumnExpression``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})"/>. If coumn expression has not been sset, then null is returned.
            </summary>
        </member>
        <member name="T:EclipseLibrary.Mvc.Html.WebGridEx">
            <summary>
            This static class contains static methods to instantiate the grid
            </summary>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridEx.GridFor``1(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{``0})">
             <summary>
             This is the recommended way to instatiate a grid. The template argument can be deduced from the passed source.
             </summary>
             <typeparam name="T"></typeparam>
            <param name="helper"></param>
            <param name="source"></param>
             <returns></returns>
             <remarks>
             <para>
             <c>WebGridEx</c> is designed to be used within the view code. First you create the grid using <see cref="M:EclipseLibrary.Mvc.Html.WebGridEx.GridFor``1(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{``0})"/> and then
             add the columns you wish to display using <see cref="M:EclipseLibrary.Mvc.Html.WebGridEx`1.AddColumn"/>. To create the grid, pass any strongly typed enumerable as the data source.
             </para>
             <para>
             To render the grid you must call the <see cref="M:EclipseLibrary.Mvc.Html.WebGridEx`1.GetHtml(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)"/> function at the place where you wish to render it.
             All parameters of <see cref="M:EclipseLibrary.Mvc.Html.WebGridEx`1.GetHtml(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)"/> are optional. In most cases you should specify the <c>columns</c> parameter to indicate
             which columns must be displayed. Columns are added using the <see cref="M:EclipseLibrary.Mvc.Html.WebGridEx`1.AddColumn"/> helper.
             </para>
             <code>
             <![CDATA[
            @{
                var grid = WebGridEx.Create(Model.RecentProcesses);
                grid.AddColumn(m => m.StartDate).Presorted(true);
                grid.AddColumn(m => m.ProcessId).CellHtml(item => Html.ActionLink(item.Value.ToString(), MVC_Receiving.Receiving.Home.Receiving(item.Model.ProcessId)));
                grid.AddColumn(m => m.OperatorName);
                grid.AddColumn(m => m.ProNumber);
                grid.AddColumn(m => m.ProDate);
                grid.AddColumn(m => m.CarrierDisplayName);
                grid.AddColumn(m => m.PalletCount).CellStyle("right-align");
                grid.AddColumn(m => m.CartonCount).CellStyle("right-align");    
            }
             ...
            @grid.GetHtml(
                selectedRowStyle: "ui-state-highlight",
                rowStyle: "rowA",
                alternatingRowStyle: "rowB",
                caption: "Recent Process List"
            )
             ]]>
             </code>
             <para>
             If the data source is empty, the grid does not render anything.
             </para>
             <para>
             Sort icons: Declare a column as <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.Presorted(System.Boolean)"/> to cause a sort icon to show up in the header.
             </para>
             <para>
             Conditional Cell Styles: <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.CellStyle(System.Func{EclipseLibrary.Mvc.Html.WebGridCellEx{`0},System.Boolean},System.String)"/>.
             </para>
             <para>
             Spanning headers: <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.SpanHeader"/>.
             </para>
             <para>
             Highlighting Selected Row: Set <see cref="P:EclipseLibrary.Mvc.Html.WebGridEx`1.SelectedIndex"/> and supply the <c>tableStyle</c> parameter to <see cref="M:EclipseLibrary.Mvc.Html.WebGridEx`1.GetHtml(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)"/>
             </para>
             <para>
             Auto generation of columns: Not supported.
             </para>
             <para>
             Footer: <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.FooterHtml(System.String)"/> and <see cref="M:EclipseLibrary.Mvc.Html.WebGridColumnEx`1.FooterStyle(System.String)"/>.
             </para>
             <para>
             Adding a column which displays row number. <c>grid.AddColumn().HeaderHtml("#").CellHtml(c =&gt; c.RowIndex + 1)</c>. Also see <see cref="P:EclipseLibrary.Mvc.Html.WebGridCellEx`1.RowIndex"/>
             </para>
             <para>
             Sharad 21 Sep 2011: Caption defaults to DisplayName of data source property. Summary attribute of table generated from Description property of data source.
             emptyDataHtml defaults to NullDisplayText of data source.
             </para>
             </remarks>
        </member>
        <member name="T:EclipseLibrary.Mvc.Html.WebGridEx`1">
             <summary>
             Implements a strongly typed WebGrid. Makes full use of the MetaData associated with the properties being displayed.
             </summary>
             <typeparam name="T">The type of each item</typeparam>
             <remarks>
             <para>
             Inspired by http://msdn.microsoft.com/en-us/magazine/hh288075.aspx
             </para>
             <para>
             Columns can be added to the grid using strongly typed lambda expressions. The column header defaults to the ShortName specified in the model metadata.
             </para>
             </remarks>
             <example>
             <para>
             This is how you would use this WebGrid within a view
             </para>
             <code>
             <![CDATA[
            @{
                var grid = WebGridEx.Create(Model.RecentProcesses);
            }
            @grid.GetHtml(
                selectedRowStyle: "ui-state-highlight",
                rowStyle: "rowA",
                alternatingRowStyle: "rowB",
                    caption: "Recent Process List",
                columns: new[] {
                        grid.Column(m => m.StartDate).Presorted(true),
                        grid.Column(m => m.ProcessId).Cell(item => Html.ActionLink(item.Value.ToString(), MVC_Receiving.Receiving.Home.Receiving(item.Model.ProcessId))),
                        grid.Column(m => m.OperatorName),
                        grid.Column(m => m.ProNumber),
                        grid.Column(m => m.ProDate),
                        grid.Column(m => m.CarrierDisplayName),
                        grid.Column(m => m.PalletCount).SetStyle("right-align"),
                        grid.Column(m => m.CartonCount).SetStyle("right-align")
                })
             ]]>
             </code>
             </example>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridEx`1.#ctor(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{`0},System.Web.Mvc.ModelMetadata)">
            <summary>
            Constructor is internal since the grid should be created using <see cref="M:EclipseLibrary.Mvc.Html.WebGridEx.GridFor``1(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
            <param name="helper"></param>
            <param name="source"></param>
            <param name="metadata"></param>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridEx`1.AddColumn">
            <summary>
            Instantiates a column which is not associated with a specific property of the model
            </summary>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridEx`1.AddColumn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Instantiates a column which is associated with a specific property of the model
            </summary>
            <typeparam name="TValue">You should not need to specify this. It will be inferred.</typeparam>
            <param name="columnExpr"></param>
            <returns></returns>
        </member>
        <member name="M:EclipseLibrary.Mvc.Html.WebGridEx`1.GetHtml(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Returns the HTML for the grid.
            </summary>
            <param name="tableStyle">The style to apply to the table tag.</param>
            <param name="headerStyle">The style to apply to the header row.</param>
            <param name="footerStyle">The style to apply to the footer row.</param>
            <param name="rowStyle">The style to apply to each data row.</param>
            <param name="alternatingRowStyle">The style to apply to alternating rows in place of <paramref name="rowStyle"/>.</param>
            <param name="selectedRowStyle">The style to apply to the row at <see cref="P:EclipseLibrary.Mvc.Html.WebGridEx`1.SelectedIndex"/>.</param>
            <param name="caption">Caption of the table. Defaults to the Display Name of the data source. Pass empty string as caption to suppress caption altogether</param>
            <param name="displayHeader">Whether header row should be displayed.</param>
            <param name="emptyDataHtml">The Markup to render when data source is empty. Defaults to NullDisplayText of datasource</param>
            <param name="id">The id attribute of the table tag.</param>
            <returns></returns>
        </member>
        <member name="P:EclipseLibrary.Mvc.Html.WebGridEx`1.SelectedIndex">
            <summary>
            The row at this index will get the <c>selectedRowStyle</c> passed to <see cref="M:EclipseLibrary.Mvc.Html.WebGridEx`1.GetHtml(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)"/>
            </summary>
        </member>
        <member name="T:EclipseLibrary.Mvc.FeatureFolderViewEngine">
             <summary>
             Inspired by T4MVC feature folder documentation https://t4mvc.codeplex.com/documentation
             </summary>
             <remarks>
             This view engine differs from the MVC RazorViewEngine in the following ways:
              1. We never look for area views with the DcmsMobile Views folder. This ensures that DCMSMobile views do not get accidentally in place of missing area views.
              2. It allows the areas to be organized using the feature folder convention and/or regular MVC convention.
              3. It looks for cshtml extensions only.
              
             Sample usage in global.asax
             <code>
                 ViewEngines.Engines.Clear();
                 // DcmsMobile folders follow feature folder convention
                 ViewEngines.Engines.Add(new FeatureFolderViewEngine(typeof(Links_DcmsMobile.MainArea).Name));
            
                 // Some Area folders follow MVC conventions, while others follow feature folder convention
                 ViewEngines.Engines.Add(new FeatureFolderViewEngine(RazorViewEngineFolders.AreaConventionalFolders | RazorViewEngineFolders.AreaFeatureFolders));
             </code>
             </remarks>
        </member>
        <member name="F:EclipseLibrary.Mvc.FeatureFolderViewEngine._isAreaEngine">
            <summary>
            Whether this display engine is for servicing areas
            </summary>
        </member>
        <member name="M:EclipseLibrary.Mvc.FeatureFolderViewEngine.#ctor(EclipseLibrary.Mvc.AreaFolderOrganization)">
            <summary>
            This constructor expects each area to be organized using feature folder convention.
            It clears out all view locations so that views of the main project do not serve as a default for area views
            </summary>
            <param name="eFolders">You can pass multiple flags if some of your areas are organized conventionally and some are organized using feature format</param>
        </member>
        <member name="M:EclipseLibrary.Mvc.FeatureFolderViewEngine.#ctor(System.String)">
            <summary>
            Allows organization of MVC files based on feature as described in T4MVC docs.
            If you have some areas organized in the conventional way, then you must use the default RazorViewEngine also.
            </summary>
            <param name="mainFeatureFolder">Name of the top level folder in which the views of the main application are organized.
            If not specified, then top level views are not supported. You must use the default RazorViewEngine to access top level views.
            </param>
        </member>
    </members>
</doc>
